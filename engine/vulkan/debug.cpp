#include "engine/vulkan/debug.h"

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
#include "extern/SPIRV-Reflect/spirv_reflect.c"
#pragma GCC diagnostic pop

#define APPEND_BOOLEAN_FIELD(name)	\
	ss << #name << ": " << (info.name ? "true" : "false") << '\n'

#define APPEND_SWITCH_CASE(name)	\
	case name:						\
		ss << #name << '\n';		\
		break

namespace kodanuki
{

void append_version(std::stringstream& ss, std::string name, uint32_t version)
{
	ss << name << ": ";
	ss << VK_VERSION_MAJOR(version) << ".";
	ss << VK_VERSION_MINOR(version) << ".";
	ss << VK_VERSION_PATCH(version) << "\n";
}

void append_extent(std::stringstream& ss, std::string name, VkExtent2D extent)
{
	ss << name << ": " << extent.width << ' ' << extent.height << '\n';
}

template <>
std::string vulkan_debug(VkExtensionProperties info)
{
	std::stringstream ss;
	ss << "extensionName: " << info.extensionName << '\n';
	append_version(ss, "specVersion", info.specVersion);
	return ss.str();
}

template <>
std::string vulkan_debug(VkLayerProperties info)
{
	std::stringstream ss;
	ss << "layerName: " << info.layerName << '\n';
	append_version(ss, "specVersion", info.specVersion);
	append_version(ss, "implementationVersion", info.implementationVersion);
	ss << "description: " << info.description << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkPhysicalDeviceProperties info)
{
	std::stringstream ss;
	append_version(ss, "apiVersion", info.apiVersion);
	append_version(ss, "driverVersion", info.driverVersion);
	ss << "vendorID: " << info.vendorID << '\n';
	ss << "deviceID: " << info.deviceID << '\n';
	ss << "deviceType: " << vulkan_debug(info.deviceType);
	ss << "deviceName: " << info.deviceName << '\n';
	ss << "pipelineCacheUUID:";
	for (uint32_t i = 0; i < VK_UUID_SIZE; i++) {
		ss << " " << +info.pipelineCacheUUID[i];
	}
	ss << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkQueueFamilyProperties info)
{
	std::stringstream ss;

	#define PRINT_ENUM_FLAG(name) \
		ss << #name << ": " << (info.queueFlags & name ? "true" : "false") << '\n'

	ss << "queueFlags: " << '\n';
	PRINT_ENUM_FLAG(VK_QUEUE_GRAPHICS_BIT);
	PRINT_ENUM_FLAG(VK_QUEUE_COMPUTE_BIT);
	PRINT_ENUM_FLAG(VK_QUEUE_TRANSFER_BIT);
	PRINT_ENUM_FLAG(VK_QUEUE_SPARSE_BINDING_BIT);
	PRINT_ENUM_FLAG(VK_QUEUE_PROTECTED_BIT);

	#undef PRINT_ENUM_FLAG

	ss << "queueCount: " << info.queueCount << '\n';
	ss << "timestampValidBits: " << info.timestampValidBits << '\n';
	ss << "minImageTransferGranularity: ";
	ss << info.minImageTransferGranularity.width << "x";
	ss << info.minImageTransferGranularity.height << "x";
	ss << info.minImageTransferGranularity.depth << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkSurfaceFormatKHR info)
{
	std::stringstream ss;
	ss << "format: " << info.format << '\n';
	ss << "colorSpace: " << info.colorSpace << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkSurfaceCapabilitiesKHR info)
{
	std::stringstream ss;
	ss << "minImageCount: " << info.minImageCount << '\n';
	ss << "maxImageCount: " << info.maxImageCount << '\n';
	append_extent(ss, "currentExtent", info.currentExtent);
	append_extent(ss, "minImageExtent", info.minImageExtent);
	append_extent(ss, "maxImageExtent", info.maxImageExtent);
	ss << "maxImageArrayLayers: " << info.maxImageArrayLayers << '\n';
	ss << "supportedTransforms: " << info.supportedTransforms << '\n';
	ss << "currentTransform: " << info.currentTransform << '\n';
	ss << "supportedCompositeAlpha: " << info.supportedCompositeAlpha << '\n';
	ss << "supportedUsageFlags: " << info.supportedUsageFlags << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkPhysicalDeviceMemoryProperties info)
{
	std::stringstream ss;
	ss << "memoryTypeCount: " << info.memoryTypeCount << '\n';
	std::vector<VkMemoryType> types(info.memoryTypes, info.memoryTypes + info.memoryTypeCount);
	ss << vulkan_debug(types);
	ss << std::string(LINE_LENGTH, '-') << '\n';
	ss << "memoryHeapCount: " << info.memoryHeapCount << '\n';
	std::vector<VkMemoryHeap> heaps(info.memoryHeaps, info.memoryHeaps + info.memoryHeapCount);
	ss << vulkan_debug(heaps);
	return ss.str();
}

template <>
std::string vulkan_debug(VkMemoryHeap info)
{
	std::stringstream ss;
	ss << "size: " << info.size / (1024 * 1024) << " MiB" << '\n';
	ss << "flags: " << info.flags << '\n';
	if (info.flags & VK_MEMORY_HEAP_DEVICE_LOCAL_BIT) ss << "VK_MEMORY_HEAP_DEVICE_LOCAL_BIT" << '\n';
	if (info.flags & VK_MEMORY_HEAP_MULTI_INSTANCE_BIT) ss << "VK_MEMORY_HEAP_MULTI_INSTANCE_BIT" << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkMemoryType info)
{
	std::stringstream ss;
	ss << "heapIndex: " << info.heapIndex << '\n';
	ss << "propertyFlags: " << info.propertyFlags << '\n';
	if (info.propertyFlags & VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT) ss << "VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT" << '\n';
	if (info.propertyFlags & VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT) ss << "VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT" << '\n';
	if (info.propertyFlags & VK_MEMORY_PROPERTY_HOST_COHERENT_BIT) ss << "VK_MEMORY_PROPERTY_HOST_COHERENT_BIT" << '\n';
	if (info.propertyFlags & VK_MEMORY_PROPERTY_HOST_CACHED_BIT) ss << "VK_MEMORY_PROPERTY_HOST_CACHED_BIT" << '\n';
	if (info.propertyFlags & VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT) ss << "VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT" << '\n';
	if (info.propertyFlags & VK_MEMORY_PROPERTY_PROTECTED_BIT) ss << "VK_MEMORY_PROPERTY_PROTECTED_BIT" << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkVertexInputAttributeDescription info)
{
	std::stringstream ss;
	ss << "location: " << info.location << '\n';
	ss << "binding: " << info.binding << '\n';
	ss << "format: " << vulkan_debug(info.format);
	ss << "offset: " << info.offset << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkPhysicalDeviceSubgroupProperties info)
{
	std::stringstream ss;
	ss << "subgroupSize: " << info.subgroupSize << '\n';
	
	#define PRINT_ENUM_FLAG(name) \
		ss << #name << ": " << (info.supportedStages & name ? "true" : "false") << '\n'

	ss << "supportedStages: " << '\n';
	PRINT_ENUM_FLAG(VK_SHADER_STAGE_VERTEX_BIT);
	PRINT_ENUM_FLAG(VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT);
	PRINT_ENUM_FLAG(VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT);
	PRINT_ENUM_FLAG(VK_SHADER_STAGE_GEOMETRY_BIT);
	PRINT_ENUM_FLAG(VK_SHADER_STAGE_FRAGMENT_BIT);
	PRINT_ENUM_FLAG(VK_SHADER_STAGE_COMPUTE_BIT);
	PRINT_ENUM_FLAG(VK_SHADER_STAGE_ALL_GRAPHICS);

	#undef PRINT_ENUM_FLAG

	#define PRINT_ENUM_FLAG(name) \
		ss << #name << ": " << (info.supportedOperations & name ? "true" : "false") << '\n'

	ss << "supportedOperations: " << '\n';
	PRINT_ENUM_FLAG(VK_SUBGROUP_FEATURE_BASIC_BIT);
	PRINT_ENUM_FLAG(VK_SUBGROUP_FEATURE_VOTE_BIT);
	PRINT_ENUM_FLAG(VK_SUBGROUP_FEATURE_ARITHMETIC_BIT);
	PRINT_ENUM_FLAG(VK_SUBGROUP_FEATURE_BALLOT_BIT);
	PRINT_ENUM_FLAG(VK_SUBGROUP_FEATURE_SHUFFLE_BIT);
	PRINT_ENUM_FLAG(VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT);
	PRINT_ENUM_FLAG(VK_SUBGROUP_FEATURE_CLUSTERED_BIT);
	PRINT_ENUM_FLAG(VK_SUBGROUP_FEATURE_QUAD_BIT);

	#undef PRINT_ENUM_FLAG

	ss << "quadOperationsInAllStages: " << (info.quadOperationsInAllStages ? "true" : "false") << '\n';
	return ss.str();
}

template <>
std::string vulkan_debug(VkResult info)
{
	std::stringstream ss;
	switch (info) {
		APPEND_SWITCH_CASE(VK_SUCCESS);
		APPEND_SWITCH_CASE(VK_NOT_READY);
		APPEND_SWITCH_CASE(VK_TIMEOUT);
		APPEND_SWITCH_CASE(VK_EVENT_SET);
		APPEND_SWITCH_CASE(VK_EVENT_RESET);
		APPEND_SWITCH_CASE(VK_INCOMPLETE);
		APPEND_SWITCH_CASE(VK_ERROR_OUT_OF_HOST_MEMORY);
		APPEND_SWITCH_CASE(VK_ERROR_OUT_OF_DEVICE_MEMORY);
		APPEND_SWITCH_CASE(VK_ERROR_INITIALIZATION_FAILED);
		APPEND_SWITCH_CASE(VK_ERROR_DEVICE_LOST);
		APPEND_SWITCH_CASE(VK_ERROR_MEMORY_MAP_FAILED);
		APPEND_SWITCH_CASE(VK_ERROR_LAYER_NOT_PRESENT);
		APPEND_SWITCH_CASE(VK_ERROR_EXTENSION_NOT_PRESENT);
		APPEND_SWITCH_CASE(VK_ERROR_FEATURE_NOT_PRESENT);
		APPEND_SWITCH_CASE(VK_ERROR_INCOMPATIBLE_DRIVER);
		APPEND_SWITCH_CASE(VK_ERROR_TOO_MANY_OBJECTS);
		APPEND_SWITCH_CASE(VK_ERROR_FORMAT_NOT_SUPPORTED);
		APPEND_SWITCH_CASE(VK_ERROR_FRAGMENTED_POOL);
		APPEND_SWITCH_CASE(VK_ERROR_UNKNOWN);
	default:
		ss << "ERROR CODE NOT LISTED: " << info << '\n';
	}
	return ss.str();
}

template <>
std::string vulkan_debug(SpvReflectResult info)
{
	std::stringstream ss;
	switch (info) {
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_SUCCESS);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_NOT_READY);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_PARSE_FAILED);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_ALLOC_FAILED);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_RANGE_EXCEEDED);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_NULL_POINTER);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_INTERNAL_ERROR);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_COUNT_MISMATCH);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_ELEMENT_NOT_FOUND);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_CODE_SIZE);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_MAGIC_NUMBER);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_EOF);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ID_REFERENCE);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_SET_NUMBER_OVERFLOW);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_STORAGE_CLASS);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_RECURSION);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_INSTRUCTION);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_UNEXPECTED_BLOCK_DATA);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_BLOCK_MEMBER_REFERENCE);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_ENTRY_POINT);
		APPEND_SWITCH_CASE(SPV_REFLECT_RESULT_ERROR_SPIRV_INVALID_EXECUTION_MODE);
	default:
		ss << "ERROR CODE NOT LISTED: " << info << '\n';
	}
	return ss.str();
}

template <>
std::string vulkan_debug(VkFormat info)
{
	std::stringstream ss;
	switch (info) {
		APPEND_SWITCH_CASE(VK_FORMAT_UNDEFINED);
		APPEND_SWITCH_CASE(VK_FORMAT_R4G4_UNORM_PACK8);
		APPEND_SWITCH_CASE(VK_FORMAT_R4G4B4A4_UNORM_PACK16);
		APPEND_SWITCH_CASE(VK_FORMAT_B4G4R4A4_UNORM_PACK16);
		APPEND_SWITCH_CASE(VK_FORMAT_R5G6B5_UNORM_PACK16);
		APPEND_SWITCH_CASE(VK_FORMAT_B5G6R5_UNORM_PACK16);
		APPEND_SWITCH_CASE(VK_FORMAT_R5G5B5A1_UNORM_PACK16);
		APPEND_SWITCH_CASE(VK_FORMAT_B5G5R5A1_UNORM_PACK16);
		APPEND_SWITCH_CASE(VK_FORMAT_A1R5G5B5_UNORM_PACK16);
		APPEND_SWITCH_CASE(VK_FORMAT_R8_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R8_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R8_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R8_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R8_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R8_SRGB);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8_SRGB);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8_SRGB);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8_SRGB);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8A8_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8A8_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8A8_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8A8_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8A8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8A8_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R8G8B8A8_SRGB);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8A8_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8A8_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8A8_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8A8_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8A8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8A8_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_B8G8R8A8_SRGB);
		APPEND_SWITCH_CASE(VK_FORMAT_A8B8G8R8_UNORM_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A8B8G8R8_SNORM_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A8B8G8R8_USCALED_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A8B8G8R8_SSCALED_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A8B8G8R8_UINT_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A8B8G8R8_SINT_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A8B8G8R8_SRGB_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2R10G10B10_UNORM_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2R10G10B10_SNORM_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2R10G10B10_USCALED_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2R10G10B10_SSCALED_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2R10G10B10_UINT_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2R10G10B10_SINT_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2B10G10R10_UNORM_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2B10G10R10_SNORM_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2B10G10R10_USCALED_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2B10G10R10_SSCALED_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2B10G10R10_UINT_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_A2B10G10R10_SINT_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_R16_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R16_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R16_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R16_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R16_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16A16_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16A16_SNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16A16_USCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16A16_SSCALED);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16A16_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16A16_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R16G16B16A16_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32B32_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32B32_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32B32_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32B32A32_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32B32A32_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R32G32B32A32_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64B64_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64B64_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64B64_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64B64A64_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64B64A64_SINT);
		APPEND_SWITCH_CASE(VK_FORMAT_R64G64B64A64_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_B10G11R11_UFLOAT_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_E5B9G9R9_UFLOAT_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_D16_UNORM);
		APPEND_SWITCH_CASE(VK_FORMAT_X8_D24_UNORM_PACK32);
		APPEND_SWITCH_CASE(VK_FORMAT_D32_SFLOAT);
		APPEND_SWITCH_CASE(VK_FORMAT_S8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_D16_UNORM_S8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_D24_UNORM_S8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_D32_SFLOAT_S8_UINT);
		APPEND_SWITCH_CASE(VK_FORMAT_BC1_RGB_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC1_RGB_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC1_RGBA_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC1_RGBA_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC2_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC2_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC3_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC3_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC4_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC4_SNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC5_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC5_SNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC6H_UFLOAT_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC6H_SFLOAT_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC7_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_BC7_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_EAC_R11_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_EAC_R11_SNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_EAC_R11G11_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_EAC_R11G11_SNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_4x4_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_4x4_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_5x4_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_5x4_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_5x5_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_5x5_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_6x5_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_6x5_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_6x6_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_6x6_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_8x5_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_8x5_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_8x6_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_8x6_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_8x8_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_8x8_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_10x5_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_10x5_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_10x6_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_10x6_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_10x8_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_10x8_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_10x10_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_10x10_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_12x10_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_12x10_SRGB_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_12x12_UNORM_BLOCK);
		APPEND_SWITCH_CASE(VK_FORMAT_ASTC_12x12_SRGB_BLOCK);
	default:
		ss << "FORMAT CODE NOT LISTED: " << info << '\n';
	}
	return ss.str();
}

template <>
std::string vulkan_debug(VkPresentModeKHR info)
{
	std::stringstream ss;
	switch (info) {
		APPEND_SWITCH_CASE(VK_PRESENT_MODE_IMMEDIATE_KHR);
		APPEND_SWITCH_CASE(VK_PRESENT_MODE_MAILBOX_KHR);
		APPEND_SWITCH_CASE(VK_PRESENT_MODE_FIFO_KHR);
		APPEND_SWITCH_CASE(VK_PRESENT_MODE_FIFO_RELAXED_KHR);
		APPEND_SWITCH_CASE(VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR);
		APPEND_SWITCH_CASE(VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR);
	default:
		ss << "PRESENT MODE UNKNOWN: " << info << '\n';
	}
	return ss.str();
}

template <>
std::string vulkan_debug(VkPhysicalDeviceType info)
{
	std::stringstream ss;
	switch(info) {
		APPEND_SWITCH_CASE(VK_PHYSICAL_DEVICE_TYPE_OTHER);
		APPEND_SWITCH_CASE(VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU);
		APPEND_SWITCH_CASE(VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU);
		APPEND_SWITCH_CASE(VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU);
		APPEND_SWITCH_CASE(VK_PHYSICAL_DEVICE_TYPE_CPU);
	default:
		ss << "ERROR UNKNOWN DEVICE TYPE: " << info << '\n';
	}
	return ss.str();
}

template <>
std::string vulkan_debug(VkPhysicalDeviceFeatures info)
{
	std::stringstream ss;
	APPEND_BOOLEAN_FIELD(robustBufferAccess);
	APPEND_BOOLEAN_FIELD(fullDrawIndexUint32);
	APPEND_BOOLEAN_FIELD(imageCubeArray);
	APPEND_BOOLEAN_FIELD(independentBlend);
	APPEND_BOOLEAN_FIELD(geometryShader);
	APPEND_BOOLEAN_FIELD(tessellationShader);
	APPEND_BOOLEAN_FIELD(sampleRateShading);
	APPEND_BOOLEAN_FIELD(dualSrcBlend);
	APPEND_BOOLEAN_FIELD(logicOp);
	APPEND_BOOLEAN_FIELD(multiDrawIndirect);
	APPEND_BOOLEAN_FIELD(drawIndirectFirstInstance);
	APPEND_BOOLEAN_FIELD(depthClamp);
	APPEND_BOOLEAN_FIELD(depthBiasClamp);
	APPEND_BOOLEAN_FIELD(fillModeNonSolid);
	APPEND_BOOLEAN_FIELD(depthBounds);
	APPEND_BOOLEAN_FIELD(wideLines);
	APPEND_BOOLEAN_FIELD(largePoints);
	APPEND_BOOLEAN_FIELD(alphaToOne);
	APPEND_BOOLEAN_FIELD(multiViewport);
	APPEND_BOOLEAN_FIELD(samplerAnisotropy);
	APPEND_BOOLEAN_FIELD(textureCompressionETC2);
	APPEND_BOOLEAN_FIELD(textureCompressionASTC_LDR);
	APPEND_BOOLEAN_FIELD(textureCompressionBC);
	APPEND_BOOLEAN_FIELD(occlusionQueryPrecise);
	APPEND_BOOLEAN_FIELD(pipelineStatisticsQuery);
	APPEND_BOOLEAN_FIELD(vertexPipelineStoresAndAtomics);
	APPEND_BOOLEAN_FIELD(fragmentStoresAndAtomics);
	APPEND_BOOLEAN_FIELD(shaderTessellationAndGeometryPointSize);
	APPEND_BOOLEAN_FIELD(shaderImageGatherExtended);
	APPEND_BOOLEAN_FIELD(shaderStorageImageExtendedFormats);
	APPEND_BOOLEAN_FIELD(shaderStorageImageMultisample);
	APPEND_BOOLEAN_FIELD(shaderStorageImageReadWithoutFormat);
	APPEND_BOOLEAN_FIELD(shaderStorageImageWriteWithoutFormat);
	APPEND_BOOLEAN_FIELD(shaderUniformBufferArrayDynamicIndexing);
	APPEND_BOOLEAN_FIELD(shaderSampledImageArrayDynamicIndexing);
	APPEND_BOOLEAN_FIELD(shaderStorageBufferArrayDynamicIndexing);
	APPEND_BOOLEAN_FIELD(shaderStorageImageArrayDynamicIndexing);
	APPEND_BOOLEAN_FIELD(shaderClipDistance);
	APPEND_BOOLEAN_FIELD(shaderCullDistance);
	APPEND_BOOLEAN_FIELD(shaderFloat64);
	APPEND_BOOLEAN_FIELD(shaderInt64);
	APPEND_BOOLEAN_FIELD(shaderInt16);
	APPEND_BOOLEAN_FIELD(shaderResourceResidency);
	APPEND_BOOLEAN_FIELD(shaderResourceMinLod);
	APPEND_BOOLEAN_FIELD(sparseBinding);
	APPEND_BOOLEAN_FIELD(sparseResidencyBuffer);
	APPEND_BOOLEAN_FIELD(sparseResidencyImage2D);
	APPEND_BOOLEAN_FIELD(sparseResidencyImage3D);
	APPEND_BOOLEAN_FIELD(sparseResidency2Samples);
	APPEND_BOOLEAN_FIELD(sparseResidency4Samples);
	APPEND_BOOLEAN_FIELD(sparseResidency8Samples);
	APPEND_BOOLEAN_FIELD(sparseResidency16Samples);
	APPEND_BOOLEAN_FIELD(sparseResidencyAliased);
	APPEND_BOOLEAN_FIELD(variableMultisampleRate);
	APPEND_BOOLEAN_FIELD(inheritedQueries);
	return ss.str();
}

}
