/**
 * Calculates the following operation:
 * tensorZ = alpha * tensorA + beta * tensorB
 */
#version 460
layout (local_size_x = 8, local_size_y = 8, local_size_z = 8) in;
layout (push_constant) uniform Params {
	uint tensor_size;
	float alpha;
	float beta;
} params;
layout (std430, binding = 0) buffer tensorZ { float Z[]; };
layout (std430, binding = 1) buffer tensorA { float A[]; };
layout (std430, binding = 2) buffer tensorB { float B[]; };

void main()
{
	uint index = gl_GlobalInvocationID.x +
		gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x +
		gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y *
		gl_WorkGroupSize.x * gl_WorkGroupSize.y;

	if (index >= params.tensor_size) {
		return;
	}

	Z[index] = params.alpha * A[index] + params.beta * B[index];
}
